Just some basic identifier shit:
a:=x+y;
x + y
x:=2: a;
y + 2
x:=3: a;
y + 3
y:=4: a;
7
a:=x^2+y^2;
25
x:=0: y:=0: a;
25

MuPAD automatically simplifies many objects of numerical type e.g.:
sin(3*PI), exp(0), (2+I)*(2-I);
0, 1, 5

The ONLY SIMPLIFICATION that MuPAD makes to expressions is to change 0*a to 0, EXCEPT if a has the value infinity

The command simplify() is a general purpose symbolic simplifier. It can be called in a general form:

f:=simplify(f);

or with the system instructed to restrict attention to a speciall class of possible simplifications. The possible additional arguments are:
exp
ln
siin
cos
sqrt
logic
e.g:
f:=simplify(f,sqrt);

The command expand is usually used to transform a product of sums into a sum of products.

The command factor will often succeed in factoring expressions and polynomials (both the numerator and denominator).

The command normal expands the numerator and denominator of an expression.

e.g.:

I NEED TO CLEAN THIS UP
==========================
>> f := sin(x)^2 + cos(x)^2 + (exp(x) - 1)/(exp(x/2) + 1):
simplify(f);
/ x \
exp| - |
\ 2 /
>> simplify(f, exp);
2 2 / x \
cos(x) + sin(x) + exp| - | - 1
\ 2 /
#COMMENT: In this case only simplifications involving exp were made
so the trigonometric part was not simplified#
>> simplify((a and b) or (a and (not b)), logic);
a
>> factor(sqrt(2)*I*x^4 - sqrt(2)*I*x^2 - sqrt(2)*I*2);
1/2 1/2 1/2
(I 2 ) (x + I) (x + 2 ) (x - I) (x - 2 )
>>
factor(7*(exp(x)^2 - 1)*sin(1)^3);
3
7 (exp(x) + 1) (exp(x) - 1) sin(1)
>> a0:=simplify((sqrt(2)*I*x^4 - sqrt(2)*I*x^2 - sqrt(2)*I*2)/(x+I));
4 1/2 2 1/2 1/2
I x 2 - I x 2 - 2 I 2
--------------------------------
x + I
#COMMENT: simplify does not recognise the common factor x+I; in order
to cancel it from a0 we now apply the factor command#

a1:=factor(a0);
1/2 1/2 1/2
(I 2 ) (x - I) (x - 2 ) (x + 2 )
>> a2:=
expand((x + 1)^2*y/(y + z)^2);
2
y 2 x y x y
-------- + -------- + --------
2 2 2
(y + z) (y + z) (y + z)
>> a2:=simplify(a2);
2
y 2 x y x y
--------------- + --------------- + ---------------
2 2 2 2 2 2
2 y z + y + z 2 y z + y + z 2 y z + y + z
>> a2:=factor(a2);
2
(x + 1) y
----------
2
(y + z)
>> normal(a2);
2
y + 2 x y + x y
----------------
2 2
2 y z + y + z
==========================================================CLEAN UP ON ISLE 5
Fucking aids.

We can substitute a value for an identifier x in an expression f by means of the subs command.
You can make several substitutions at once within the same subs command, and it is also possible to substitute for a sub-expression rather than for an individial identifier.
If you want to substitute for a system function such as sin, you must stop the system from evaluating it by means of the hold command.
However, we can make a substitution for sin(x) without using hold.

TO CLEAN UP
=======================================
>> subs(a + b*a, a = 4);
4 b + 4
>> subs([a * (b + c), sin(b +c)], b + c = a);
2
[a , sin(a)]
>> subs(sin(x), sin = cos), subs(sin(x), hold(sin) = cos),
subs(sin(x),sin(x)=x);
sin(x), cos(x), x
7
>> f := sin(z*(x + y)):
>> subs(f,x=1,y=-1);
sin(0)
>> g:=subs(f,x=1,y=-1);
sin(0)
>> g;
0
>> subs(f, x + y = z);
2
sin(z )
>> subs(x + y + z, x + y = z);
x + y + z
=============================================

To replace sub-expressions use subsex
subsex(x + y + z, x + y = z);
2 z

Very time consuming.

Looping

! for ... end_for
! while ... end_while
! repeat ... end_repeat
! if ... then .. end_if
! if ... then ... else ... end_if
! if ... then ... elif ... then ... ... else ... end_if
! case ... end_case

NOTE THE UNDERSCORE _ for the end statements.

>> i := 20:
for i from 1 to 3 do
  a := i;
  b := i^2;
  print(a, b)6
end_for:
1, 1
2, 4
3, 9
>> i;
4
>> for i from 2.2 downto 1 step 0.5 do
print(i)
end_for:
2.2
1.7
1.2
>> for i from 1 to 3 do
print(i);
if i = 2 then break end_if
end_for:
1
2
>> if FALSE then NO elif TRUE then YES_YES else YES_NO end_if;
YES_YES

============================================================
Note to get multiple lines to Shift+Enter


sum command to compute the sum of an arithmetic expression with respect to an index in some given range:
>> sum(1/3^n,n=1..infinity);
1/2
>> sum(a^2,a=1..5);
55
>> sum(b^2,b=1..k);
2 3
k k k
- + -- + --
6 2 3
>> sum(b,b=1..k);
2
k k
- + --
2 2
